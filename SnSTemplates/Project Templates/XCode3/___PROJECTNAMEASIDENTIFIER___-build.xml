<?xml version="1.0" encoding="UTF-8"?>
<!--
This Ant buildfile requires that you have included the following Ant library extensions:
<ul>
  <li><a href="http://ant-contrib.sourceforge.net/">Ant-Contrib</a></li>
   <li><a href="http://subclipse.tigris.org/svnant.html">SvnAnt</a></li>
   <li><a href="http://antelope.tigris.org/">Antelope</a></li>
   <li><a href="http://ant-doxygen.blogspot.com">Ant Doxygen Task</a></li>
 </ul>
 -->
<project
  name="___PROJECTNAMEASIDENTIFIER___-build"
  default="project.init"
  basedir="."
>

	<description>The aim of this Ant buildfile is to propose services for handling the 'ApplicationName' iPhone project.</description>

	<loadproperties srcfile="___PROJECTNAMEASIDENTIFIER___-build.properties"/>

	<!-- The AntContrib library extends Ant. -->
	<taskdef resource="net/sf/antcontrib/antlib.xml"/>
	<!-- The Antelope library extends Ant. -->
	<taskdef
    name="stringutil"
    classname="ise.antelope.tasks.StringUtilTask"
  />

	<!-- The SvnAnt library. -->
	<property
    name="svnant.directoryPath"
    location="/opt/svnant-1.3.0"
  />
	<path id="svnant.classpath">
		<fileset dir="${svnant.directoryPath}">
			<include name="**/*.jar"/>
		</fileset>
	</path>
	<typedef
    resource="org/tigris/subversion/svnant/svnantlib.xml"
    classpathref="svnant.classpath"
  />

	<target
    name="project.defineMacroCommit"
    depends=""
    description="Defines a SVN 'commit' macro."
  >
		<macrodef name="commit">
			<attribute name="comment"/>
			<element name="fileSetIncludeAndExcludes"/>
			<sequential>
				<!--antcall target="project.computeSvn"/-->
				<svn
          username="${svn.login}"
          password="${svn.password}"
          svnkit="true"
          javahl="false"
        >
					<commit message="@{comment}">
						<fileSetIncludeAndExcludes/>
					</commit>
				</svn>
			</sequential>
		</macrodef>
	</target>

	<target
    name="defineMacroAdd.project"
    depends=""
    description="Defines a SVN 'add' macro."
  >
		<macrodef name="add">
			<element name="fileSetIncludeAndExcludes"/>
			<sequential>
				<!--antcall target="project.computeSvn"/-->
				<svn
          username="${login.svn}"
          password="${login.password}"
          svnkit="true"
        >
					<add recurse="true">
						<fileSetIncludeAndExcludes/>
					</add>
				</svn>
			</sequential>
		</macrodef>
	</target>

	<target
    name="releaseAndTag"
    depends="project.init, project.build, project.preTag, project.tag"
    description="Builds from scratch the .apk and then tags the current version of the project."
  />

	<target
    name="project.tag"
    depends="project.init, project.ensureSvnTag, project.computeSvn"
    description="Tags the current version of the project."
  >
		<property
      name="tag.svn"
      value="${projectPrefix}-${version.svn}"
    />
		<propertyregex
      property="tagUrl.svn"
      override="yes"
      input="${repository.url}"
      regexp="${svnTagPathRegexp}"
      replace="\1/tags/${tag.svn}"
      global="true"
    />
		<echo>Creating the tag '${tag.svn}' from the '${repository.url}' HEAD</echo>
		<svn
      username="${svn.login}"
      password="${svn.password}"
    >
			<copy
        srcUrl="${repository.url}"
        destUrl="${tagUrl.svn}"
        revision="HEAD"
        message="The v${version.svn}."
      />
		</svn>
	</target>

	<target
    name="project.computeSvn"
    depends="project.init, project.ensureSvn"
    description="Computes the SVN properties."
  >
		<if>
			<not>
				<isset property="repository.url"/>
			</not>
			<then>
				<svn
          username="${svn.login}"
          password="${svn.password}"
        >
					<wcVersion
            path="."
            prefix=""
          />
				</svn>
			</then>
		</if>
	</target>

	<target
    name="project.ensureSvnTag"
    depends="project.init"
    description="Asks for the SVN tag if necessary."
  >
		<input
      message="Version of the release?"
      addproperty="version.svn"
    />
		<property
      name="tag.svn"
      value="${projectPrefix}-${version.svn}"
    />
	</target>

	<target
    name="project.ensureSvn"
    depends="project.init"
    description="Asks for the SVN credentials if necessary."
  >
		<input
      message="SVN login?"
      addproperty="svn.login"
    />
		<input
      message="SVN password?"
      addproperty="svn.password"
    />
	</target>

	<!--                                -->
	<!-- The section specific to iPhone -->
	<!--                                -->

	<target
    name="project.init"
    depends="project.defineMacroCommit, defineMacroAdd.project"
    description="Default target, which should always be called first be other targets."
  >
		<property
      name="configuration"
      value="Debug"
    />
		<property
      name="iphoneSDKName"
      value="iphoneos"
    />
		<property
      name="iphoneSDKVersion"
      value="4.2"
    />
		<property
      name="iphoneSDK"
      value="${iphoneSDKName}${iphoneSDKVersion}"
    />
		<property
      name="xcodeBuild.directoryPath"
      location="build"
    />
		<property
      name="generatedDoxygen.directoryPath"
      location="doxygen"
    />
		<property
      name="distribution.directoryPath"
      location="dist"
    />
		<property
      name="zippedInstallationPackage.filePath"
      location="${distribution.directoryPath}/${projectPrefix}.app.zip"
    />
	</target>

	<target
    name="project.build"
    depends="project.init"
    description="Builds from scratch the project .app."
  >
		<delete dir="${xcodeBuild.directoryPath}"/>
		<exec
      executable="xcodebuild"
      failonerror="true"
    >
			<arg line="-project ${projectPrefix}.xcodeproj"/>
			<arg line="-alltargets"/>
			<arg line="-configuration &quot;${configuration}&quot;"/>
			<arg line="-sdk ${iphoneSDK}"/>
			<arg line="build"/>
		</exec>
		<antcall target="project.zipDist"/>
	</target>

	<target
    name="project.zipDist"
    depends="project.init"
    description="Builds a .zip of the distribution application installation file."
  >
		<mkdir dir="${distribution.directoryPath}"/>
		<zip
      destfile="${zippedInstallationPackage.filePath}"
      basedir="${xcodeBuild.directoryPath}/${configuration}-${iphoneSDKName}"
      update="false"
    />
	</target>

	<target
    name="project.clean"
    depends="project.init"
    description="Cleans-up the project generated artifacts."
  >
		<delete dir="${xcodeBuild.directoryPath}"/>
		<delete dir="${generatedDoxygen.directoryPath}"/>
	</target>

	<target
    name="project.preTag"
    depends="project.init, project.ensureSvnTag, project.ensureSvn"
    description="Performs some work just before the tag is post on the release."
  >
		<svn
      username="${svn.login}"
      password="${svn.password}"
    >
			<status
        path="${zippedInstallationPackage.filePath}"
        textStatusProperty="status.svn"
      />
		</svn>
		<echo>The SVN status of the zipped installation package file '${zippedInstallationPackage.filePath}' is '${status.svn}'.</echo>
		<antcall target="project.zipDist"/>
		<if>
			<equals
        arg1="${status.svn}"
        arg2="unversioned"
      />
			<then>
				<echo>Adding to SVN the distribution directory '${distribution.directoryPath}'...</echo>
				<add>
					<fileSetIncludeAndExcludes >
						<fileset file="${distribution.directoryPath}"/>
					</fileSetIncludeAndExcludes>
				</add>
				<echo>Committing to SVN the distribution directory '${distribution.directoryPath}'...</echo>
				<commit comment="The repostory of the distribution packages.">
					<fileSetIncludeAndExcludes>
						<fileset file="${distribution.directoryPath}"/>
					</fileSetIncludeAndExcludes>
				</commit>
				<echo>Adding to SVN the installation package '${zippedInstallationPackage.filePath}'...</echo>
				<add>
					<fileSetIncludeAndExcludes >
						<fileset file="${zippedInstallationPackage.filePath}"/>
					</fileSetIncludeAndExcludes>
				</add>
			</then>
		</if>
		<echo>Committing to SVN the installation package '${zippedInstallationPackage.filePath}'...</echo>
		<commit comment="New version of the installation package for the '${tag.svn}'.">
			<fileSetIncludeAndExcludes>
				<fileset file="${zippedInstallationPackage.filePath}"/>
			</fileSetIncludeAndExcludes>
		</commit>
	</target>

	<target
    name="project.generateDoc"
    depends="project.init"
    description="Generares the documentation of the project."
  >
		<!-- The Doxygen Ant task library. -->
		<property
       name="doxygenAnt.directoryPath"
       location="/opt/doxygen-svn/bin"
     />
		<taskdef
      name="doxygen"
      classname="org.doxygen.tools.DoxygenTask"
    />
		<property
      name="classes.directoryPath"
      location="Classes"
    />
		<property
      name="doxygenConfig.filePath"
      location="doxygen.config"
    />
		<echo file="${doxygenConfig.filePath}">INPUT=${classes.directoryPath}${line.separator}OUTPUT_DIRECTORY=${generatedDoxygen.directoryPath}${line.separator}FILE_PATTERNS=*.h *.m${line.separator}RECURSIVE=YES${line.separator}EXTRACT_ALL=YES${line.separator}GENERATE_LATEX=NO${line.separator}HTML_OUTPUT=html${line.separator}JAVADOC_AUTOBRIEF=YES</echo>
		<delete dir="${generatedDoxygen.directoryPath}"/>
		<mkdir dir="${generatedDoxygen.directoryPath}"/>
		<doxygen
      doxygenPath="${doxygenAnt.directoryPath}/doxygen"
      configFilename="${doxygenConfig.filePath}"
    />
		<delete file="${doxygenConfig.filePath}"/>
	</target>

	<!--                                              -->
	<!--    The section specific to images Icon       -->
	<!--                                              -->
	<target 
  	name="project.icons"
  	depends=""
  	description="Generate all icons size for project">
		<image srcdir="Images/Icons" encoding="png" destdir="Images/Icons" includes="icon512.png" overwrite="true">
			<scale proportions="width" width="512"/>
			<globmapper from="icon512.png" to="iTunesArtwork"/>
		</image>
		<image srcdir="Images/Icons" encoding="png" destdir="Images/Icons" includes="icon512.png" overwrite="true">
			<scale proportions="width" width="57"/>
			<globmapper from="icon512.png" to="Icon.png"/>
		</image>
		<image srcdir="Images/Icons" encoding="png" destdir="Images/Icons" includes="icon512.png" overwrite="true">
			<scale proportions="width" width="114"/>
			<globmapper from="icon512.png" to="Icon@2x.png"/>
		</image>
		<image srcdir="Images/Icons" encoding="png" destdir="Images/Icons" includes="icon512.png" overwrite="true">
			<scale proportions="width" width="29"/>
			<globmapper from="icon512.png" to="Icon-Small.png"/>
		</image>
		<image srcdir="Images/Icons" encoding="png" destdir="Images/Icons" includes="icon512.png" overwrite="true">
			<scale proportions="width" width="58"/>
			<globmapper from="icon512.png" to="Icon-Small@2x.png"/>
		</image>
		<image srcdir="Images/Icons" encoding="png" destdir="Images/Icons" includes="icon512.png" overwrite="true">
			<scale proportions="width" width="50"/>
			<globmapper from="icon512.png" to="Icon-Small-50.png"/>
		</image>
		<image srcdir="Images/Icons" encoding="png" destdir="Images/Icons" includes="icon512.png" overwrite="true">
			<scale proportions="width" width="72"/>
			<globmapper from="icon512.png" to="Icon-72.png"/>
		</image>
	</target>


	<!--                                              -->
	<!-- The section specific to the software factory -->
	<!--                                              -->

	<target
    name="sf.init"
    depends=""
    description="Initializes the software factory properties."
  >
		<!-- This propery 'sf.properties.filePath' must be defined during the software factory run. -->
		<loadproperties srcfile="${sf.properties.filePath}">
			<filterchain>
				<linecontains>
					<contains value="${projectPrefix}"/>
				</linecontains>
			</filterchain>
		</loadproperties>
		<macrodef name="propertycopyIf">
			<attribute name="name"/>
			<attribute name="from"/>
			<sequential>
				<if>
					<isset property="@{from}"/>
					<then>
						<propertycopy
              name="@{name}"
              from="@{from}"
            />
					</then>
				</if>
			</sequential>
		</macrodef>
		<propertycopyIf
      name="key.alias.password"
      from="${projectPrefix}.key.alias.password"
    />
		<propertycopyIf
      name="key.store.password"
      from="${projectPrefix}.key.store.password"
    />
		<propertycopyIf
      name="ftp.hostName"
      from="${projectPrefix}.ftp.hostName"
    />
		<propertycopyIf
      name="ftp.directoryName"
      from="${projectPrefix}.ftp.directoryName"
    />
		<propertycopyIf
      name="ftp.login"
      from="${projectPrefix}.ftp.login"
    />
		<propertycopyIf
      name="ftp.password"
      from="${projectPrefix}.ftp.password"
    />
	</target>

	<target
    name="sf.deploy"
    depends=""
    if="ftp.hostName"
    description="Pushes the latest compiled application .apk on a FTP server."
  >
		<property
      name="binary.filePath"
      location="dist/${projectPrefix}.app.zip"
    />
		<if>
			<not>
				<isset property="ftp.directoryName"/>
			</not>
			<then>
				<stringutil
          property="ftp.directoryName"
          string="${projectPrefix}"
        >
					<lowercase/>
				</stringutil>
			</then>
		</if>
		<ftp
      action="send"
      binary="yes"
      ignoreNoncriticalErrors="true"
      remotedir="${ftp.directoryName}"
      server="${ftp.hostName}"
      userid="${ftp.login}"
      password="${ftp.password}"
      verbose="yes"
    >
			<fileset file="${binary.filePath}"/>
		</ftp>
	</target>

</project>
